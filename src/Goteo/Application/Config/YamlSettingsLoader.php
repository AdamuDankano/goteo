<?php
/*
 * This file is part of the Goteo Package.
 *
 * (c) Platoniq y FundaciÃ³n Goteo <fundacion@goteo.org>
 *
 * For the full copyright and license information, please view the README.md
 * and LICENSE files that was distributed with this source code.
 */

namespace Goteo\Application\Config;

use Symfony\Component\Config\ConfigCache;
use Symfony\Component\Config\Loader\FileLoader;
use Symfony\Component\Yaml\Yaml;

use Goteo\Application\App;

class YamlSettingsLoader extends FileLoader
{
    static public $cached_files = [];

    static public function getCacheFilename($resource) {
        return GOTEO_CACHE_PATH . 'config/' . md5($resource) . '.php';
    }

    static public function getConfigCache($file) {
        // the second argument indicates whether or not you want to use debug mode
        return new ConfigCache($file, App::debug());
    }

    public function load($resource, $type = null)
    {
        $cachePath = static::getCacheFilename($resource);
        static::$cached_files[] = $cachePath;
        $cacheMatcher = static::getConfigCache($cachePath);

        if (!$cacheMatcher->isFresh()) {
            // Get config from yaml
            $config = Yaml::parse(file_get_contents($resource));

            //Code in PHP
            $code = "<?php\n".
              "// auto-generated by %s\n".
              "// date: %s\nreturn %s;\n";
            $code = sprintf($code, __CLASS__, date('Y/m/d H:i:s'), var_export($config, true));

            $cacheMatcher->write($code);

        }

        // you may want to require the cached code:
        return require $cachePath;

        // return $config;
    }

    public function supports($resource, $type = null)
    {
        return is_string($resource) && 'yml' === pathinfo(
            $resource,
            PATHINFO_EXTENSION
        );
    }
}
